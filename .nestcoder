# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/maichaine/src/app.module.ts">
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { RobotController } from './robot/robot.controller';
import { RobotService } from './robot/robot.service';

@Module({
  imports: [],
  controllers: [AppController, RobotController],
  providers: [AppService, RobotService],
})
export class AppModule {}
</FILE>
<FILE path="/home/travis/Projects/maichaine/src/app.controller.ts">
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}

</FILE>
<FILE path="/home/travis/Projects/maichaine/src/app.service.ts">
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}

</FILE>
<FILE path="/home/travis/Projects/maichaine/src/robot/robot.controller.ts">
import { Controller, Get, Post, Body, Query } from '@nestjs/common';
import { RobotService } from './robot.service';

@Controller('robot')
export class RobotController {
  constructor(private readonly robotService: RobotService) {}

  @Post('move-mouse')
  moveMouse(@Body() body: { x: number; y: number }): string {
    this.robotService.moveMouse(body.x, body.y);
    return 'Mouse moved';
  }

  @Get('mouse-position')
  getMousePosition(): { x: number; y: number } {
    return this.robotService.getMousePos();
  }

  @Post('type')
  typeString(@Body('text') text: string): string {
    this.robotService.typeString(text);
    return 'Text typed';
  }

  // Add more endpoints as needed
}
</FILE>
<FILE path="/home/travis/Projects/maichaine/src/robot/robot.service.ts">
import { Injectable } from '@nestjs/common';
import * as robot from 'robotjs';

@Injectable()
export class RobotService {
  moveMouse(x: number, y: number): void {
    robot.moveMouse(x, y);
  }

  getMousePos(): { x: number; y: number } {
    return robot.getMousePos();
  }

  typeString(text: string): void {
    robot.typeString(text);
  }

  // Add more RobotJS functions as needed
}
</FILE>
<FILE path="/home/travis/Projects/maichaine/start:dev.stdout.txt">
[2J[3J[H[[90m3:59:51 PM[0m] Starting compilation in watch mode...

[[90m3:59:52 PM[0m] Found 0 errors. Watching for file changes.

[32m[Nest] 272195  - [39m09/25/2024, 3:59:52 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 272195  - [39m09/25/2024, 3:59:52 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +6ms[39m
[32m[Nest] 272195  - [39m09/25/2024, 3:59:52 PM [32m    LOG[39m [38;5;3m[RoutesResolver] [39m[32mAppController {/}:[39m[38;5;3m +3ms[39m
[32m[Nest] 272195  - [39m09/25/2024, 3:59:52 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/, GET} route[39m[38;5;3m +1ms[39m
[32m[Nest] 272195  - [39m09/25/2024, 3:59:52 PM [32m    LOG[39m [38;5;3m[NestApplication] [39m[32mNest application successfully started[39m[38;5;3m +1ms[39m
[31m[Nest] 272195  - [39m09/25/2024, 3:59:52 PM [31m  ERROR[39m [38;5;3m[NestApplication] [39m[31mError: listen EADDRINUSE: address already in use :::3000[39m[38;5;3m +2ms[39m
node:net:1904
    const ex = new UVExceptionWithHostPort(err, 'listen', address, port);
               ^

Error: listen EADDRINUSE: address already in use :::3000
    at Server.setupListenHandle [as _listen2] (node:net:1904:16)
    at listenInCluster (node:net:1961:12)
    at Server.listen (node:net:2063:7)
    at ExpressAdapter.listen (/home/travis/Projects/maichaine/node_modules/@nestjs/platform-express/adapters/express-adapter.js:95:32)
    at /home/travis/Projects/maichaine/node_modules/@nestjs/core/nest-application.js:180:30
    at new Promise (<anonymous>)
    at NestApplication.listen (/home/travis/Projects/maichaine/node_modules/@nestjs/core/nest-application.js:170:16)
    at async bootstrap (/home/travis/Projects/maichaine/src/main.ts:6:3) {
  code: 'EADDRINUSE',
  errno: -98,
  syscall: 'listen',
  address: '::',
  port: 3000
}

Node.js v20.17.0
[2J[3J[H[[90m4:00:07 PM[0m] File change detected. Starting incremental compilation...

[[90m4:00:07 PM[0m] Found 0 errors. Watching for file changes.

[32m[Nest] 272501  - [39m09/25/2024, 4:00:07 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 272501  - [39m09/25/2024, 4:00:07 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +5ms[39m
[32m[Nest] 272501  - [39m09/25/2024, 4:00:07 PM [32m    LOG[39m [38;5;3m[RoutesResolver] [39m[32mAppController {/}:[39m[38;5;3m +3ms[39m
[32m[Nest] 272501  - [39m09/25/2024, 4:00:07 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/, GET} route[39m[38;5;3m +1ms[39m
[32m[Nest] 272501  - [39m09/25/2024, 4:00:07 PM [32m    LOG[39m [38;5;3m[NestApplication] [39m[32mNest application successfully started[39m[38;5;3m +1ms[39m
[2J[3J[H[[90m4:06:55 PM[0m] File change detected. Starting incremental compilation...

[96msrc/robot/robot.service.ts[0m:[93m2[0m:[93m24[0m - [91merror[0m[90m TS2307: [0mCannot find module 'robotjs' or its corresponding type declarations.

[7m2[0m import * as robot from 'robotjs';
[7m [0m [91m                       ~~~~~~~~~[0m

[[90m4:06:55 PM[0m] Found 1 error. Watching for file changes.

[2J[3J[H[[90m4:06:56 PM[0m] File change detected. Starting incremental compilation...

[96msrc/robot/robot.service.ts[0m:[93m2[0m:[93m24[0m - [91merror[0m[90m TS2307: [0mCannot find module 'robotjs' or its corresponding type declarations.

[7m2[0m import * as robot from 'robotjs';
[7m [0m [91m                       ~~~~~~~~~[0m

[[90m4:06:56 PM[0m] Found 1 error. Watching for file changes.

[2J[3J[H[[90m4:07:17 PM[0m] File change detected. Starting incremental compilation...

[[90m4:07:17 PM[0m] Found 0 errors. Watching for file changes.

node:internal/modules/cjs/loader:1228
  throw err;
  ^

Error: Cannot find module './build/Release/robotjs.node'
Require stack:
- /home/travis/Projects/maichaine/node_modules/robotjs/index.js
- /home/travis/Projects/maichaine/dist/robot/robot.service.js
- /home/travis/Projects/maichaine/dist/robot/robot.controller.js
- /home/travis/Projects/maichaine/dist/app.module.js
- /home/travis/Projects/maichaine/dist/main.js
    at Module._resolveFilename (node:internal/modules/cjs/loader:1225:15)
    at Module._load (node:internal/modules/cjs/loader:1051:27)
    at Module.require (node:internal/modules/cjs/loader:1311:19)
    at require (node:internal/modules/helpers:179:18)
    at Object.<anonymous> (/home/travis/Projects/maichaine/node_modules/robotjs/index.js:1:15)
    at Module._compile (node:internal/modules/cjs/loader:1469:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)
    at Module.load (node:internal/modules/cjs/loader:1288:32)
    at Module._load (node:internal/modules/cjs/loader:1104:12)
    at Module.require (node:internal/modules/cjs/loader:1311:19) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/home/travis/Projects/maichaine/node_modules/robotjs/index.js',
    '/home/travis/Projects/maichaine/dist/robot/robot.service.js',
    '/home/travis/Projects/maichaine/dist/robot/robot.controller.js',
    '/home/travis/Projects/maichaine/dist/app.module.js',
    '/home/travis/Projects/maichaine/dist/main.js'
  ]
}

Node.js v20.17.0
[2J[3J[H[[90m4:07:18 PM[0m] File change detected. Starting incremental compilation...

[[90m4:07:18 PM[0m] Found 0 errors. Watching for file changes.

node:internal/modules/cjs/loader:1228
  throw err;
  ^

Error: Cannot find module './build/Release/robotjs.node'
Require stack:
- /home/travis/Projects/maichaine/node_modules/robotjs/index.js
- /home/travis/Projects/maichaine/dist/robot/robot.service.js
- /home/travis/Projects/maichaine/dist/robot/robot.controller.js
- /home/travis/Projects/maichaine/dist/app.module.js
- /home/travis/Projects/maichaine/dist/main.js
    at Module._resolveFilename (node:internal/modules/cjs/loader:1225:15)
    at Module._load (node:internal/modules/cjs/loader:1051:27)
    at Module.require (node:internal/modules/cjs/loader:1311:19)
    at require (node:internal/modules/helpers:179:18)
    at Object.<anonymous> (/home/travis/Projects/maichaine/node_modules/robotjs/index.js:1:15)
    at Module._compile (node:internal/modules/cjs/loader:1469:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)
    at Module.load (node:internal/modules/cjs/loader:1288:32)
    at Module._load (node:internal/modules/cjs/loader:1104:12)
    at Module.require (node:internal/modules/cjs/loader:1311:19) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/home/travis/Projects/maichaine/node_modules/robotjs/index.js',
    '/home/travis/Projects/maichaine/dist/robot/robot.service.js',
    '/home/travis/Projects/maichaine/dist/robot/robot.controller.js',
    '/home/travis/Projects/maichaine/dist/app.module.js',
    '/home/travis/Projects/maichaine/dist/main.js'
  ]
}

Node.js v20.17.0
[2J[3J[H[[90m4:07:19 PM[0m] File change detected. Starting incremental compilation...

[96msrc/robot/robot.service.ts[0m:[93m2[0m:[93m24[0m - [91merror[0m[90m TS2307: [0mCannot find module 'robotjs' or its corresponding type declarations.

[7m2[0m import * as robot from 'robotjs';
[7m [0m [91m                       ~~~~~~~~~[0m

[[90m4:07:19 PM[0m] Found 1 error. Watching for file changes.

[2J[3J[H[[90m4:07:20 PM[0m] File change detected. Starting incremental compilation...

[96msrc/robot/robot.service.ts[0m:[93m2[0m:[93m24[0m - [91merror[0m[90m TS2307: [0mCannot find module 'robotjs' or its corresponding type declarations.

[7m2[0m import * as robot from 'robotjs';
[7m [0m [91m                       ~~~~~~~~~[0m

[[90m4:07:20 PM[0m] Found 1 error. Watching for file changes.


</FILE>
<FILE path="/home/travis/Projects/maichaine/test/app.e2e-spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from './../src/app.module';

describe('AppController (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/ (GET)', () => {
    return request(app.getHttpServer())
      .get('/')
      .expect(200)
      .expect('Hello World!');
  });
});

</FILE>
<FILE path="/home/travis/Projects/maichaine/dist/main.d.ts">
export {};

</FILE>
<FILE path="/home/travis/Projects/maichaine/dist/app.module.d.ts">
export declare class AppModule {
}

</FILE>
<FILE path="/home/travis/Projects/maichaine/dist/robot/robot.controller.d.ts">
import { RobotService } from './robot.service';
export declare class RobotController {
    private readonly robotService;
    constructor(robotService: RobotService);
    moveMouse(body: {
        x: number;
        y: number;
    }): string;
    getMousePosition(): {
        x: number;
        y: number;
    };
    typeString(text: string): string;
}

</FILE>
<FILE path="/home/travis/Projects/maichaine/dist/robot/robot.service.d.ts">
export declare class RobotService {
    moveMouse(x: number, y: number): void;
    getMousePos(): {
        x: number;
        y: number;
    };
    typeString(text: string): void;
}

</FILE>
<FILE path="src/main.ts" TARGET>
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(4141);
}
bootstrap();
</FILE>
<REQUEST>
i want to control my machine over api using nutjs
</REQUEST>